version: 2.1
#  ------------------------------------------------------------------------------------------------------------------------------------------
# defaults (like global variables dubstiuted below)
#  ------------------------------------------------------------------------------------------------------------------------------------------
docvarnode: &dok_node
    docker:
      - image: circleci/node:13.8.0

docvaraws: &dok_awscli
    docker:
      - image: circleci/node:13.8.0
    
#  ------------------------------------------------------------------------------------------------------------------------------------------
#  list of commands used in job 
#
#  ------------------------------------------------------------------------------------------------------------------------------------------

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi

#  ------------------------------------------------------------------------------------------------------------------------------------------
#    Jobs list startd from here    
#
#
#  ------------------------------------------------------------------------------------------------------------------------------------------

jobs:

# -----------------------------  Build front end and back end dependancies ----------------------

  build-frontend--dependency:
   <<: *dok_node
   steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./frontend
          command: ls -la && npm install
      - persist_to_workspace:
          root: .
          paths:
            - frontend/node_modules

  build-backend--dependency:
    <<: *dok_node
    steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./backend
          command: ls -la && npm install
      - persist_to_workspace:
          root: .
          paths:
            - backend/node_modules

# -----------------------------  Build front end ----------------------
  build-frontend:
    <<: *dok_node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          working_directory: ./frontend
          command: 
            npm run build            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

# -----------------------------  Build back end ----------------------
  build-backend:
    <<: *dok_node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          working_directory: ./backend
          command: 
             npm run build             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
# -----------------------------  Test front end  ----------------------
  test-frontend:
    <<: *dok_node
    steps:
      - checkout
      - run:
          name: Junit coverage report
          working_directory: ./frontend
          command: npm install --save-dev jest-junit
      - run:
          name: Run tests with JUnit 
          working_directory: ./frontend
          command: npm test -- --ci --runInBand --reporters=default --reporters=jest-junit && pwd && ls -la /tmp
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./testres
      - store_test_results:
          path: ./frontend/testres
      - store_artifacts:
          path: ./frontend/testres

# -----------------------------  Test back end  ----------------------                
  test-backend:
    <<: *dok_node
    steps:
      - checkout
      - run:
          name: Junit coverage reporte
          working_directory: ./backend
          command: npm install --save-dev jest-junit
      - run:
          name: Run tests with JUnit
          working_directory: ./backend
          command: npm test -- --ci --runInBand --reporters=default --reporters=jest-junit && pwd
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./testres
      - store_test_results:
          path: ./backend/testres
      - store_artifacts:
          path: ./backend/testres

# -----------------------------  Test front end for security ----------            
  scan-frontend:
    <<: *dok_node
    steps:
      - checkout
      - run:
          name: frontend security check
          working_directory: ./frontend
          command: npm audit --audit-level=critical
# -----------------------------  Test front end for security ----------            
  scan-backend:
    <<: *dok_node
    steps:
      - checkout      
      - run:
          name: backend security check
          working_directory: ./backend
          command: npm audit --audit-level=critical

# --------------------------------------------------------------------------------
#
#         WORKFLOW  STEPS STARTS FROM HERE
#
# --------------------------------------------------------------------------------
workflows:
  default:
    jobs:
      - build-frontend--dependency
      - build-backend--dependency
      - build-frontend:
          requires: [build-frontend--dependency]
      - build-backend:
          requires: [build-backend--dependency]
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      
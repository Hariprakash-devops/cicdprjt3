version: 2.1
orbs:
  slack: circleci/slack@4.4.2
#  ------------------------------------------------------------------------------------------------------------------------------------------
# defaults (like global variables dubstiuted below)
#  ------------------------------------------------------------------------------------------------------------------------------------------
docvarnode: &dok_node
    docker:
      - image: circleci/node:13.8.0

docvaraws: &dok_awscli
    docker:
      - image: circleci/aws-cli    

slackvarfail: &slack_msg      
          event: fail
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [{"type": "plain_text",
                      "text": "Udapeople build STEP : ${MY_STEP_NAME} Failure #<< pipeline.number >> for << pipeline.project.git_url >> / << pipeline.git.branch >> ",
                      "emoji": true }]
                }
              ]
            } 


#  ------------------------------------------------------------------------------------------------------------------------------------------
#  list of commands used in job 
#
#  ------------------------------------------------------------------------------------------------------------------------------------------

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi

#  ------------------------------------------------------------------------------------------------------------------------------------------
#    Jobs list startd from here    
#
#
#  ------------------------------------------------------------------------------------------------------------------------------------------

jobs:

# -----------------------------  Build front end ----------------------
  build-frontend:
    <<: *dok_node
    environment: 
      MY_STEP_NAME: "Test frontend"
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          working_directory: ./frontend
          command:             
            npm i
            npm run build                        
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build          
      - slack/notify: 
          <<: *slack_msg          

# -----------------------------  Build back end ----------------------
  build-backend:
    <<: *dok_node
    environment: 
      MY_STEP_NAME: "Test frontend"
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          working_directory: ./backend
          command:              
             npm i
             npm run build             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          <<: *slack_msg       
# -----------------------------  Test front end  ----------------------
  test-frontend:
    <<: *dok_node
    environment: 
      MY_STEP_NAME: "Test frontend"
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run tests with JUnit 
          working_directory: ./frontend
          command:               
              npm test
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./testres
      - store_test_results:
          path: ./frontend/testres
      - store_artifacts:
          path: ./frontend/testres
      - slack/notify:
          <<: *slack_msg

# -----------------------------  Test back end  ----------------------                
  test-backend:
    <<: *dok_node
    environment: 
      MY_STEP_NAME: "Build backend"    
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run tests with JUnit
          working_directory: ./backend
          command: 
              npm test
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./testres
      - store_test_results:
          path: ./backend/testres
      - store_artifacts:
          path: ./backend/testres
      - slack/notify:
          <<: *slack_msg

# -----------------------------  Test front end for security ----------            
  scan-frontend:
    <<: *dok_node
    environment: 
      MY_STEP_NAME: "Security scan frontend"    
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]      
      - run:
          name: frontend security check
          working_directory: ./frontend
          command: npm audit fix --audit-level=critical --force
      - slack/notify:
          <<: *slack_msg

# -----------------------------  Test front end for security ----------            
  scan-backend:
    <<: *dok_node
    environment: 
      MY_STEP_NAME: "Security scan backend"    
    steps:
      - checkout  
      - restore_cache:
          keys: [backend-build]          
      - run:
          name: backend security check
          working_directory: ./backend
          command: npm audit fix --audit-level=critical --force
      - slack/notify:
          <<: *slack_msg
# --------------------------------------------------------------------------------
#
#         WORKFLOW  STEPS STARTS FROM HERE
#
# --------------------------------------------------------------------------------
workflows:
  default:
    jobs:
      - build-frontend:
          context: slack-secrets
      - build-backend:
          context: slack-secrets
      - test-frontend:
          requires: [build-frontend]
          context: slack-secrets
      - test-backend:
          requires: [build-backend]
          context: slack-secrets
      - scan-frontend:
          requires: [build-frontend]
          context: slack-secrets
      - scan-backend:
          requires: [build-backend]
          context: slack-secrets

      